def arr():
    return [1,2,3,4,5]

print(arr)

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class MyLinkedList:
    def __init__(self):
        self.head = None
    
    def append(self, data):            
        if not self.head:
            self.head = Node(data)
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = Node(data)

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    
    def delete(self, key):
        current = self.head
        prev = None
        while current and current.data != key:
            prev = current
            current = current.next
        
        if not current:
            return
        
        if prev:
            prev.next = current.next
        else:
            self.head = current.next

    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False
    
    def insert(self, prev_node, data):
        if not prev_node:
            print("The given previous node cannot be NULL.")
            return
        new_node = Node(data)
        new_node.next = prev_node.next
        prev_node.next = new_node

    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev
    
    def length(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count
    
    def is_empty(self):
        return self.head is None
    
    def get_middle(self):
        slow = self.head
        fast = self.head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow.data if slow else None
    
    def has_cycle(self):
        slow = self.head
        fast = self.head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                return True
        return False
    
# Example usage
linked_list = MyLinkedList()
linked_list.append(1)
linked_list.append(2)
linked_list.append(3)
linked_list.append(4)
linked_list.append(5)
linked_list.display()  # Output: 1 -> 2 -> 3 -> 4 -> 5 -> None
linked_list.delete(3)
linked_list.display()  # Output: 1 -> 2 -> 4 -> 5 -> None
linked_list.insert(linked_list.head.next, 3)
linked_list.display()  # Output: 1 -> 2 -> 3 -> 4 -> 5 -> None
print(linked_list.search(3))  # Output: True
print(linked_list.search(6))  # Output: False
linked_list.reverse()
linked_list.display()  # Output: 5 -> 4 -> 3 -> 2 -> 1 -> None
print(linked_list.length())  # Output: 5
print(linked_list.is_empty())  # Output: False
print(linked_list.get_middle())  # Output: 3
print(linked_list.has_cycle())  # Output: False
linked_list.head.next.next.next.next = linked_list.head  # Creating a cycle for testing
print(linked_list.has_cycle())  # Output: True
linked_list.head.next.next.next.next = None  # Breaking the cycle


    
